[{"categories":null,"content":"Self-hosting a wiki for my TTRPG group I\u0026rsquo;ve been a part of an ongoing series of TTRPG (Tabletop Roleplaying Games) for a few years now. I\u0026rsquo;m so fortunate to have a group of friends that are committed enough to keep a game going for this long, and we even play in our office which is pretty cool.\nOf course there\u0026rsquo;s a lot that goes into making these games happen. One thing we do to make this easier is sharing the responsibilities for running the game between all of us. Those kinds of things include ordering food, playing music, running the game board display, and taking notes. That last responsibility is mine.\nFor the longest time, I was taking these notes in Obsidian and backing them up to a public Github repository . I foolishly thought that instructing people to visit my Github profile would be a sufficient way to share these notes. As it turned out, that was a terrible experience.\nSo because of this I set out to find the best way to host my notes, and maybe even enable my fellow party members to make contributions as well.\nMy requirements Need to have:\nPublishing to the public internet Ability for other (authorized!) people to make contributions Ability to drop my existing notes in place from Obsidian Self-hosted Secure Nice to have:\nMarkdown editor Good design Docker container Open-source with good community Options for hosting notes Github I\u0026rsquo;ve tested this option, and it failed. You really need to be a technical person to understand how to effectively view markdown files on Github. And even then, you really should also have a good working knowledge of how Github works as well. Markdown files straight from Obsidian aren\u0026rsquo;t always formatted correctly too. This option is out.\nTrying to figure out what happened last session but I have to use Github\nHugo I really wanted this option to work. As you may know, this blog is made using Hugo (find out more about that [here](Why I moved my blog from Wordpress to Hugo.md)). The obvious downside to using Hugo is that I would be the only one able to publish the campaign notes. And even worse still, the process for making these notes available would go like this:\nTake notes in Obsidian Copy notes to Hugo campaign notes directory Commit changes for the hugo site Github Actions runs automatically, publishing the site after about ~2-3 minutes Notes are available on the Github Pages site That\u0026rsquo;s just not going to work.\nWiki.js I knew from the jump that a wiki of some sort would be my best bet. With a wiki service, you can reasonably expect it to support multiple maintainers, markdown support, and a interconnected set up pages with backlinks. But the best part is that my users (party members) don\u0026rsquo;t need to worry about any of that! At a maximum, all they need to do is visit the site and read any page to get value from it.\nI\u0026rsquo;ve used products like TiddlyWiki in the past. That worked well for the simple application I was using it for at the time. Since then though, many wiki services have become available. In my search, I eventually found Wiki.js by Requarks . This product checked all of the need-to-haves as well as nice-to-haves that I had on my list. I could self-host Wiki.js in my homelab as a Docker container. It even supports Markdown and has a very robust set of features for managing users.\nLet\u0026rsquo;s get started!\nHosting Wiki.js Docker I started by looking on Dockerhub for a community image to use for my deployment. I was happy to see that there was an actively maintained image from linuxserver.io. A lot of other services in my homelab are run on images provided by linuxserver.io so I trusted that their Wiki.js image would be just as reliable.\nI started by putting together a dockercompose.yml file for the lscr.io/linuxserver/wikijs:latest image. I kept most of their sample docker compose file the same, except for the following changes:\nChanging TZ to my local timezone Mapping my local persistent storage Adding my custom cloudflared docker network for communicating with my Cloudflare Tunnel container (more on that below) For now, I am deploying Wiki.js using a sqlite database. It\u0026rsquo;s important to note that when Wiki.js 3.0 eventually comes out, it will require PostgreSQL. Because of this, my current deployment is not future-proof, but it does at least deliver a minimum viable product.\nI then opened Portainer on my dedicated Docker host for external-facing services. This host is on a network segment that can\u0026rsquo;t make outbound connections to other hosts on my local network. From there, I used the Stacks feature of Portainer to deploy my docker compose file. I\u0026rsquo;m using Stacks because it\u0026rsquo;s handy for deploying an entire suite of microservices from a single compose file. Eventually, I plan to deploy a dedicated PostgreSQL database for this wiki, as well as a dedicated Elasticsearch services. Keep an eye out for those blog posts in the future!\nAfter copy/pasting my docker compose file into the Portainer Stacks editor and clicking deploy, the site went up almost instantly. Success! I did a few little edits to make sure this was going to work for me. When I was comfortable with going forward, I moved on to the next steps.\nCloudflare Being that this is an externally facing web service, I wanted to minimize my attack surface as much as possible. No RPG wiki is worth the security of my home network. That meant that I definitely wasn\u0026rsquo;t going to be doing any port forwarding for this project. I opted instead to use Cloudflare\u0026rsquo;s Zero Trust networking service: Cloudflare Tunnel .\nCloudflare Tunnel allows me to host services on my local network without exposing that service directly to the internet. Everything going to my web server is proxied through Cloudflare first. For a while now, I\u0026rsquo;ve had a Cloudflare Tunnel node in the same network segment as my hosts for external services. You can see how this is done in the diagram below. I started by going to Cloudflare\u0026rsquo;s Zero Trust portal, where my existing Cloudflared node is set up. I then used the Create a tunnel button to input the specifics of my internal web server. Here, I input the hostname of my Docker server host, as well as the port that Wiki.js is being hosted on. Then, I assigned the route that should be used to access this service. For me, I will be using rpgwiki.lukerand.com so I put that in. This automatically creates a DNS entry for my lukerand.com domain. Almost instantly, you could visit the Wiki.js instance by going to rpgwiki.lukerand.com . Double success!\nWhat\u0026rsquo;s next Backups Right now, I\u0026rsquo;m using Wiki.js\u0026rsquo;s local filesystem backup feature. Eventually, I think I\u0026rsquo;ll want to look into the S3 storage option. That\u0026rsquo;s a technology that I want to learn more about so I think this application would be a great excuse to do that. Clustering Right now, Wiki.js is being hosted on a single Docker server. This is clearly more than enough for the kind of traffic I\u0026rsquo;m serving, but this is another example of a technology I want to learn. So why not give that a shot at some point?\nElasticsearch Wiki.js supports a number of \u0026ldquo;Search Engine\u0026rdquo; products in the admin settings. One of these is Elasticsearch. We are currently exploring the application of Elasticsearch at my work, so I see this as a great way to get familiar with that technology as self-study. ![[Pasted image 20240527185048.png]]\nPostgreSQL On Requark\u0026rsquo;s blog for Wiki.js, they have an article about requiring PostgreSQL in version 3 of Wiki.js. That means that my current use of a sqlite database eventually won\u0026rsquo;t be supported.\n","permalink":"http://localhost:1313/posts/self-hosting-a-wiki-for-my-ttrpg-group/","tags":null,"title":"Self Hosting a Wiki for My TTRPG Group"},{"categories":null,"content":"Why I moved my blog from Wordpress to Hugo Why are you making a big deal about this? You only have one article on your blog! Are you ever going to write about what you\u0026rsquo;re working on, or are you just going to keep re-inventing the wheel?\nYeah\u0026hellip; Great questions.\nI do have a counter to that last question, though. This move is exactly the kind of project I want to work on and write about. My homelab is my playground. Shaking things up is what makes this project so fun. And, as I\u0026rsquo;ll explain in a bit, this move will allow me to practice some important skills when it comes to DevOps practices.\nSpeed and security I won\u0026rsquo;t get into explaining what Hugo is in this article, but just know that it is what is called a \u0026ldquo;static site generator\u0026rdquo;. That means that I can write a blog post in markdown and run a few commands to automatically generate a website from those files. Beyond that, this site is what is called a \u0026ldquo;static site\u0026rdquo;. Static webpages stand in contrast to standard webpages which are classified as \u0026ldquo;dynamic\u0026rdquo;.\nThese static pages have numerous advantages over dynamic sites. A big one for me is that they are much faster to load because there is no server-side computation going on and there\u0026rsquo;s also much less work being done by the client (your web browser.) Load times are considerably faster than what I was seeing on my Wordpress site running in a Docker container. The other huge benefit of static sites is that they are less susceptible to security vulnerabilities. There is far less (if any) Javascript being executed that could be exploited by attackers. But being better than Wordpress at security is kind of a low bar anyway.\nPipelines Hugo can be easily integrated with continuous integration and continuous delivery (CI/CD) pipelines. This means that you can automate the process of building and deploying your website. For example, I use GitHub Actions to automatically build and deploy my site every time I push changes to my Git repository. This is a huge benefit for me, as it allows me to automate the deployment process and ensure that my website is always up to date.\nMore control With Hugo, I have more control over the look and feel of my site. I can create my own themes and layouts, and I can customize the way my content is displayed. I also have more control over the underlying code, which gives me the flexibility to add custom features and functionality. This is great for me, as I want learn more about web development anyway.\nTransparency Both Hugo and Wordpress are open source, which is great. I have confidence that the community of passionate maintainers will keep both services free and secure.\nHowever, Wordpress is mostly maintained by a single corporate interest, Automattic. Because of this, the future of Wordpress is slightly more questionable than Hugo.\nUsing Hugo also has the added benefit of making it easier to open source my site. Right now you can go to my Github page and view the entire source code for my blog. Pretty neat!\nHow it Hugo fits into my PKM system I use a PKM (personal knowledge management) system to organize my notes, articles, and other digital resources. Hugo can be integrated with my PKM system to automatically generate blog posts from my notes. This allows me to easily share my knowledge with others and to keep my blog up to date with my latest thinking. Plus, I already use Obsidian which is a natively markdown note taking application. Because of this, publishing a blog post is as easy as copying one of my notes into my Hugo repo.\nConclusion Overall, I\u0026rsquo;m really happy with my decision to move my blog from Wordpress to Hugo. I\u0026rsquo;ve noticed a significant improvement in speed and security, and I have more control over the look and feel of my site. I\u0026rsquo;m also excited about the potential for using Hugo to automate my blogging workflow and integrate it with my PKM system.\nI\u0026rsquo;m also looking forward to using this move as an opportunity to learn more about DevOps practices. By using GitHub Actions to automate my deployment process, I\u0026rsquo;m getting hands-on experience with a key DevOps tool.\nOf course, there are some downsides to using Hugo. It\u0026rsquo;s not as easy to use as Wordpress, and there\u0026rsquo;s a smaller community of users. However, I\u0026rsquo;m confident that the benefits of using Hugo outweigh the drawbacks.\nIf you\u0026rsquo;re considering moving your blog to Hugo, I encourage you to give it a try. It\u0026rsquo;s a great way to improve the speed, security, and control of your site.\n","permalink":"http://localhost:1313/posts/why-i-moved-my-blog-from-wordpress-to-hugo/","tags":["hugo","wordpress","meta"],"title":"Why I Moved My Blog From Wordpress to Hugo"},{"categories":null,"content":"My goals for this blog I have way too many hobbies, projects, and plans. I would say this is a good problem to have, but things pile up sometimes. I think a big reason for that is that I often get in my own way. The motivation is there but I need something to get excited about in order to get over that initial hump.\nI want to do what I do, and prove that I do it I want to have tangible output when I finish a project. I want the satisfaction of making something, even when I\u0026rsquo;m doing something as mundane as updating software in my homelab. Hell, maybe I\u0026rsquo;ll even have a newfound motivation to automate new processes if I also get to write about it.\nI want to deepen my understanding Watching a YouTube tutorial can only get you so far. I learn a lot just by doing, but how long do I hold on to that information? I feel like following a tutorial often gets me a surface-level understanding of what I\u0026rsquo;m trying to learn. I\u0026rsquo;ve seen plenty of suggestions online that a cheat code of sorts to deepening understanding on a topic is to write it down. I\u0026rsquo;m not talking about jotting down some throwaway notes, I\u0026rsquo;m talking about doing my research and having intentionality behind what I write.\nI want a creative outlet I just love making things. As an example, I recently started making short videos of my film photography process that I posted to Instagram on a whim. It was so fun. I must have gone back and re-watched those videos tens of times. Being able to express myself is important to my identity. I\u0026rsquo;m hoping producing well thought out blog posts will also scratch that itch.\nThis is my corner of the internet, just for me I will make this spot my own, and make it a living representation of who I am and what I\u0026rsquo;m interested in.\nTopics to expect Homelab projects DevOps / Platform Engineering topics Film Photography Gaming Coffee Personal knowledge management ","permalink":"http://localhost:1313/posts/my-goals-for-this-blog/","tags":["blog"],"title":"My goals for this blog"},{"categories":null,"content":"👋 Hi! My name is Luke Rand and I\u0026rsquo;m a Site Reliability Engineer from Maine.\n","permalink":"http://localhost:1313/about/","tags":null,"title":"About Me"}]